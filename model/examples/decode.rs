use unquec_model::{
    commands::{Cmd, IotCmd, TtlvCommandModel},
    quec_ble_device::QuecBLEDevice,
    ttlv::{
        decode::{DecodeResult, DecodeTools},
        encode::EncodeTools,
        model::{TTLVData, TTLVValue},
    },
};

use base64::{Engine as _, engine::general_purpose::STANDARD as b64};


fn main() {
    let d = b64.decode("Tea3cq+S+qHAScEJiIZ6ft9r2UeGd74Wy/KeX2Lkfg3/FQPurScBTuOSFJMJbYCp").unwrap();
    println!("d: {:?}, len: {}", d, d.len());

    let d2 = b64.decode("eIXy2VqnhKxI9BrX").unwrap();
    println!("d2: {:?}, len: {}", d2, d2.len());

    let d3 = b64.decode("+JKIMc2uv5tYncJKdCYLAi8BK5MSGbctDrHP26lJvJ0=").unwrap();
    println!("d3: {:?}, len: {}", d3, d3.len());

    // let d3 = b64.encode([b'a';48]);
    // println!("d3: {:?}, len: {}", d3, d3.len());

    let example_data = vec![
        0xaa, 0xaa, 0x00, 0x49, 0x0f, 0x00, 0x01, 0x00, 0xb4, 0x00, 0x63, 0x00, 0x40, 
        0x54, 0x65, 0x61, 0x33, 0x63, 0x71, 0x2b, 0x53, 0x2b, 0x71, 0x48, 0x41, 0x53, 
        0x63, 0x45, 0x4a, 0x69, 0x49, 0x5a, 0x36, 0x66, 0x74, 0x39, 0x72, 0x32, 0x55, 
        0x65, 0x47, 0x64, 0x37, 0x34, 0x57, 0x79, 0x2f, 0x4b, 0x65, 0x58, 0x32, 0x4c, 
        0x6b, 0x66, 0x67, 0x33, 0x2f, 0x46, 0x51, 0x50, 0x75, 0x72, 0x53, 0x63, 0x42, 
        0x54, 0x75, 0x4f, 0x53, 0x46, 0x4a, 0x4d, 0x4a, 0x62, 0x59, 0x43, 0x70,
    ];

    unquec_model::ttlv::decode::example_decode_usage(example_data);


    let example_data = vec![
        0xaa, 0xaa, 0x0, 0x49, 0x12, 0x0, 0x1, 0x0, 0xb7, 0x0, 0x63, 0x0, 0x40, 0x54, 
        0x65, 0x61, 0x33, 0x63, 0x71, 0x2b, 0x53, 0x2b, 0x71, 0x48, 0x41, 0x53, 0x63, 
        0x45, 0x4a, 0x69, 0x49, 0x5a, 0x36, 0x66, 0x74, 0x39, 0x72, 0x32, 0x55, 0x65, 
        0x47, 0x64, 0x37, 0x34, 0x57, 0x79, 0x2f, 0x4b, 0x65, 0x58, 0x32, 0x4c, 0x6b, 
        0x66, 0x67, 0x33, 0x2f, 0x46, 0x51, 0x50, 0x75, 0x72, 0x53, 0x63, 0x42, 0x54, 
        0x75, 0x4f, 0x53, 0x46, 0x4a, 0x4d, 0x4a, 0x62, 0x59, 0x43, 0x70
    ];

    unquec_model::ttlv::decode::example_decode_usage(example_data);

    let example_data = vec![
        0xaa, 0xaa, 0x0, 0x49, 0x1b, 0x0, 0x1, 0x0, 0xb4, 0x0, 0x63, 0x0, 0x40, 0x38, 
        0x4c, 0x77, 0x37, 0x76, 0x56, 0x2b, 0x74, 0x54, 0x31, 0x64, 0x48, 0x48, 0x66, 
        0x56, 0x70, 0x54, 0x50, 0x43, 0x42, 0x67, 0x50, 0x66, 0x72, 0x63, 0x65, 0x46, 
        0x48, 0x43, 0x4c, 0x66, 0x75, 0x46, 0x42, 0x74, 0x36, 0x2f, 0x30, 0x66, 0x47, 
        0x4c, 0x56, 0x55, 0x53, 0x67, 0x74, 0x77, 0x73, 0x50, 0x42, 0x63, 0x4f, 0x46, 
        0x4e, 0x4b, 0x79, 0x6b, 0x69, 0x72, 0x7a, 0x46, 0x61, 0x58, 0x61
    ];

    unquec_model::ttlv::decode::example_decode_usage(example_data);

    let example_data = vec![
        0xaa, 0xaa, 0x0, 0x2d, 0xa, 0x0, 0x12, 0x0, 0xb5, 0x0, 0x7b, 0x0, 0x10, 0x45, 
        0x30, 0x37, 0x35, 0x33, 0x31, 0x34, 0x35, 0x39, 0x33, 0x45, 0x44, 0x31, 0x44, 
        0x34, 0x30, 0x0, 0x5b, 0x0, 0x10, 0x41, 0x46, 0x41, 0x34, 0x42, 0x31, 0x41, 
        0x43, 0x44, 0x43, 0x30, 0x30, 0x46, 0x45, 0x35, 0x37
    ];

    unquec_model::ttlv::decode::example_decode_usage(example_data);

    let example_data = vec![
        0xaa, 0xaa, 0x0, 0x49, 0x1b, 0x0, 0x1, 0x0, 0xb4, 0x0, 0x63, 0x0, 0x40, 0x38, 
        0x4c, 0x77, 0x37, 0x76, 0x56, 0x2b, 0x74, 0x54, 0x31, 0x64, 0x48, 0x48, 0x66, 
        0x56, 0x70, 0x54, 0x50, 0x43, 0x42, 0x67, 0x50, 0x66, 0x72, 0x63, 0x65, 0x46, 
        0x48, 0x43, 0x4c, 0x66, 0x75, 0x46, 0x42, 0x74, 0x36, 0x2f, 0x30, 0x66, 0x47, 
        0x4c, 0x56, 0x55, 0x53, 0x67, 0x74, 0x77, 0x73, 0x50, 0x42, 0x63, 0x4f, 0x46, 
        0x4e, 0x4b, 0x79, 0x6b, 0x69, 0x72, 0x7a, 0x46, 0x61, 0x58, 0x61
    ];
    
    unquec_model::ttlv::decode::example_decode_usage(example_data);

    let example_data = vec![
        0xaa, 0xaa, 0x0, 0x13, 0xc1, 0x0, 0x5, 0x0, 0x14, 0x0, 0x34, 0x0, 0x3, 0x0, 0x9, 
        0x0, 0x12, 0x0, 0x56, 0x0, 0x1a, 0x0, 0xe6
    ];
    
    unquec_model::ttlv::decode::example_decode_usage(example_data);

    let example_data = vec![
        0xaa, 0xaa, 0x0, 0x9, 0xe2, 0x0, 0x6, 0x0, 0x14, 0x0, 0xe2, 0x0, 0xe6
    ];
    
    unquec_model::ttlv::decode::example_decode_usage(example_data);

    // let example_data = vec![
    //     0xaa, 0xaa, 0x0, 0x4d, 0xb6, 0x0, 0x1, 0x1, 0x15, 0x0, 0xcb, 0x0, 0x2d, 0x46, 0x43, 0x4d, 0x31, 0x30, 0x30, 0x44, 0x41, 0x41, 0x52, 0x31, 0x32, 0x41, 0x30, 0x39, 0x5f, 0x51, 0x54, 0x48, 0x51, 0x4c, 0x5f, 0x4d, 0x43, 0x55, 0x5f, 0x47, 0x45, 0x4e, 0x45, 0x52, 0x49, 0x43, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x5f, 0x56, 0x32, 0x2e, 0x33, 0x2e, 0x33, 0x0, 0xd3, 0x0, 0x13, 0x4d, 0x43, 0x55, 0x3a, 0x32, 0x2e, 0x30, 0x2e, 0x33, 0x3b, 0x44, 0x53, 0x50, 0x3a, 0x31, 0x2e, 0x31, 0x2e, 0x35
    // ];

    // unquec_model::ttlv::decode::example_decode_usage(example_data);

    // let example_data = vec![
    //     0xaa, 0xaa, 0x0, 0x9, 0xf1, 0x0, 0x5e, 0x0, 0x14, 0x0, 0x22, 0x0, 0x5d
    // ];

    // unquec_model::ttlv::decode::example_decode_usage(example_data);
    // return Ok(());
}

